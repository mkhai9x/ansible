---
- name: "Python | {{ ansible_distribution }} | Install dependencies for pyenv"
  ansible.builtin.apt:
    name:
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libffi-dev
      - liblzma-dev
      - python3-openssl
      - git
    state: present
  become: true

- name: "Python | {{ ansible_distribution }} | Clone pyenv repository"
  ansible.builtin.git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ ansible_user_dir }}/.pyenv"
    update: yes
  become: false

- name: "Python | {{ ansible_distribution }} | Check if Python versions are already installed"
  ansible.builtin.command: "{{ ansible_user_dir }}/.pyenv/bin/pyenv versions --bare"
  register: pyenv_versions
  changed_when: false
  failed_when: false
  become: false

- name: "Python | {{ ansible_distribution }} | Install Python versions using pyenv"
  ansible.builtin.shell: |
    export PYENV_ROOT="{{ ansible_user_dir }}/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    pyenv install {{ item }}
  args:
    executable: /bin/bash
  become: false
  environment:
    PYENV_ROOT: "{{ ansible_user_dir }}/.pyenv"
    PATH: "{{ ansible_user_dir }}/.pyenv/bin:{{ ansible_user_dir }}/.pyenv/shims:{{ ansible_env.PATH }}"
  loop: "{{ python_versions }}"
  when: item not in pyenv_versions.stdout
  register: pyenv_install
  changed_when: "'already installed' not in pyenv_install.stdout"

- name: "Python | {{ ansible_distribution }} | Set global Python version"
  ansible.builtin.shell: |
    export PYENV_ROOT="{{ ansible_user_dir }}/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    pyenv global {{ python_global_version }}
  args:
    executable: /bin/bash
  become: false
  environment:
    PYENV_ROOT: "{{ ansible_user_dir }}/.pyenv"
    PATH: "{{ ansible_user_dir }}/.pyenv/bin:{{ ansible_user_dir }}/.pyenv/shims:{{ ansible_env.PATH }}"

- name: "Python | {{ ansible_distribution }} | Verify Python installation"
  ansible.builtin.command: "{{ ansible_user_dir }}/.pyenv/shims/python --version"
  register: python_version
  changed_when: false

- name: "Python | {{ ansible_distribution }} | Display Python version"
  ansible.builtin.debug:
    msg: "Python version installed: {{ python_version.stdout }}"
